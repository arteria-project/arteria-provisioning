#!/bin/bash

# Sets the environment up for a specific webservice, in particular, copying
# configuration files, creating log directories etc.

# This requires pip and virtualenv

function usage {
    echo "install-service <product> <user> [group] [type] [src] [arteria-src] [installpath]"
    echo
    echo "  product: The name of the package being installed, e.g. 'runfolder'"
    echo "  user: The user which will run the service"
    echo "  group: The group that should have access to log files etc"
    echo "  type: default 'dev'"
    echo "  src: default '/arteria/arteria-lib/<product>'"
    echo "  arteria-src: default '/arteria/arteria-lib/arteria'"
    echo "  installpath: default '/opt/<product>'"
}

if [ "$(id -u)" != "0" ]; then
    echo "Running install as '$(id)'"
    echo "You must run this script as root" 1>&2
    exit 1
fi

product=$1
user=$2
group=$3
type=$4
source=$5
source_arteria=$6
installpath=$7

if [ "$product" == "" ]; then
    echo "You must supply a product"
    usage
    exit 1
fi

if [ "$user" == "" ]; then
    echo "You must supply a user"
    usage
    exit 1
fi

if [ "$group" == "" ]; then
    group=$user
fi

if [ "$type" == "" ]; then
    type="dev"
fi

if [ "$source" == "" ]; then
    source="/arteria/arteria-lib/$product"
fi

if [ "$source_arteria" == "" ]; then
    source_arteria="/arteria/arteria-lib/arteria"
fi

if [ "$installpath" == "" ]; then
    installpath="/opt/$product"
fi

echo "Stopping all supervisor services in the $product group"
supervisorctl stop $product:*

echo "Installing from $source to $installpath, type=$type"
mkdir -pv $installpath/etc
echo "Creating virtual environment at $installpath"
virtualenv $installpath/
cp -v $source/config/app.config $installpath/etc/
chown -R $user:$group $installpath

logpath=/var/log/$product
echo "Creating log directory at $logpath"
mkdir -pv $logpath
chown -R $user:$group $logpath
echo "Copying default logger.config to $installpath/etc"
cp $source/config/logger.config $installpath/etc/

# activate the virtualenv
echo "Switching to the '$installpath' virtualenv"
source $installpath/bin/activate

if [ "$type" == "dev" ]; then
    echo "Installing the $product package in development mode"
    pip install -e file://$source_arteria -r $source_arteria/requirements/dev
    pip install -e file://$source -r $source/requirements/dev
else
    # TODO: Support prod
    echo "NOTE: Installing the $product package in development mode" >&2
    pip install -e file://$source_arteria -r $source_arteria/requirements/prod
    pip install -e file://$source -r $source/requirements/prod
fi

echo "Deactivating the python virtual environment"
deactivate

echo "Registering the service under supervisor control"
supervisorconfig_source=/arteria/arteria-provisioning/services/$product.conf
supervisorconfig_target=/etc/supervisor/conf.d/$product.conf

if [ "$type" == "dev" ]; then
    echo "Adding symbolic links to the supervisor configs"
    ln -fs $supervisorconfig_source $supervisorconfig_target
else
    cp -fv $supervisorconfig_source $supervisorconfig_target
fi

echo "Update the supervisor configuration"
supervisorctl update

echo "Start all services in the $product group"
supervisorctl start $product:*
supervisorctl status

if [ "$type" == "dev" ]; then
    echo "Add $product-ws-test for easy integration testing"
    testbin="/usr/bin/$product-ws-test"
    echo "source $installpath/bin/activate" > $testbin
    echo "nosetests $source/tests/integration" >> $testbin
    chmod +x $testbin
    echo "Running integration tests..."
    # TODO: Query for started rather than sleeping
    sleep 2
    $testbin
else
    echo "Not running tests"
fi
